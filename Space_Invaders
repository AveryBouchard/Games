import pygame
import random
import math
from pygame import mixer

# Initialize PyGame - Always in PyGame
pygame.init()

# Create the Screen
screen = pygame.display.set_mode((800, 600))
background = pygame.image.load('Space-Free-PNG-Image.png')

# Caption and Icon
pygame.display.set_caption("Space Invaders")
icon = pygame.image.load('icons8-space-ship-64.png')
pygame.display.set_icon(icon)

# Player
playerImg = pygame.image.load('icons8-fighter-48.png')
playerX = 370
playerY = 530
playerX_change = 0
playerY_change = 0

# Enemy
enemyImg = []
enemyX = []
enemyY = []
enemyX_change = []
enemyY_change = []
num_of_enemies = 6

for i in range(num_of_enemies):
    enemyImg.append(pygame.image.load('ufo.png'))
    enemyX.append(random.randint(5, 755))
    enemyY.append(30)
    enemyX_change.append(3)
    enemyY_change.append(30)

# Bullet
bulletImg = pygame.image.load('bullet.png')
bulletX = 0
bulletY = 480
bulletX_change = 0
bulletY_change = 8
bullet_state = "ready"

# Score
score_value = 0
font = pygame.font.Font('freesansbold.ttf', 20)
textX = 10
textY = 10

# Game Over
game_over_font = pygame.font.Font('freesansbold.ttf', 60)

# Background music
mixer.music.load('ChillingMusic.wav')
mixer.music.play(-1)


def show_score(x, y):
    score = font.render("Score :" + str(score_value), True, (255, 255, 255))
    screen.blit(score, (x, y))


def game_over_text():
    over_text = font.render("GAME OVER", True, (255, 255, 255))
    screen.blit(over_text, (350, 250))


def player(x, y):
    screen.blit(playerImg, (x, y))


def enemy(x, y, i):
    screen.blit(enemyImg[i], (x, y))


def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y + 10))


def is_collision(ex, ey, bx, by):
    distance = math.sqrt((math.pow(ex - bx, 2)) + (math.pow(ey - by, 2)))
    if distance < 12 and bullet_state == "fire":
        return True
    else:
        return False


# Main Game Loop
running = True
while running:

    screen.fill((1, 0, 25))
    screen.blit(background, (0, 0))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # Check for keystroke
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -5
            if event.key == pygame.K_RIGHT:
                playerX_change = 5
            if event.key == pygame.K_SPACE:
                if bullet_state is "ready":
                    bullet_sound = mixer.Sound('Laser-SoundBible.com-602495617.wav')
                    bullet_sound.play()
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0

    playerX += playerX_change
    enemyX += enemyX_change
    # enemyY += enemyY_change

    # Player Limits Left and Right
    if playerX <= 0:
        playerX = 0
    if playerX >= 753:
        playerX = 753

    # Enemy Limits
    for i in range(num_of_enemies):

        if enemyY[i] > 100:
            for j in range(num_of_enemies):
                enemyY[j] = 2000
            game_over_text()
            break

        enemyX[i] += enemyX_change[i]
        if enemyX[i] <= 0:
            enemyX[i] = 0
            enemyX_change[i] *= -1
            enemyY[i] += enemyY_change[i]
        elif enemyX[i] >= 756:
            enemyX[i] = 756
            enemyX_change[i] *= -1
            enemyY[i] += enemyY_change[i]

            # Collision
        collision = is_collision(enemyX[i], enemyY[i], bulletX, bulletY)
        if collision:
            bulletY = 480
            bullet_state = "ready"
            score_value += 1
            enemyX[i] = random.randint(5, 755)
            enemyY[i] = 30
            bullet_sound = mixer.Sound('Depth Charge Short-SoundBible.com-1303947570.wav')
            bullet_sound.play()

        enemy(enemyX[i], enemyY[i], i)

    # Bullet Movement
    if bulletY <= 0:
        bulletY = 480
        bullet_state = "ready"
    if bullet_state is "fire":
        fire_bullet(bulletX, bulletY)
        bulletY -= bulletY_change

    # Keep player and score on screen
    player(playerX, playerY)
    show_score(textX, textY)

    # Always in PyGame
    pygame.display.update()
